name: Python application

on:
  pull_request:
    branches:
    - master
  push:
    branches:
    - dev

jobs:
  build:

    runs-on: ubuntu-18.04

    steps:
    - uses: actions/checkout@v1
    - name: check python executable
      run: |
          for f in $(find . -name "*.py")
          do
              if [[ $(head -1 $f) == "#!"* ]]; then
                  if [[ -x $f ]]; then
                      echo "$f is executable."
                  else
                      echo "$f is executable, but doesn't have x bit."
                      exit 1
                  fi
              fi
          done

    - name: Set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r src/GooglePlayAdvancedSearch/tests/requirements.txt
    - name: Build translation files
      run: |
        cd src/GooglePlayAdvancedSearch/django
        for f in locale/*
        do
          if [[ ! $f =~ [^_]+_[[:upper:]]([[:upper:]]|[[:lower:]]{2,}) ]]; then
            echo $f is invalid. If the country part is 2 characters, it must be UPPERCASE. Otherwise it must be Titlecase.
            exit 1
          fi
        done

        sudo apt-get --yes install gettext
        django-admin compilemessages
        test -f locale/zh_Hans/LC_MESSAGES/django.mo
        test -f locale/zh_Hans/LC_MESSAGES/djangojs.mo
    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --ignore=W191,E501,E117,E712 --max-complexity=10 --max-line-length=127 --statistics

    - name: Restore sqlite 3.31
      id: restore-sqlite-binary
      uses: actions/cache@9ceee97d994dd3474c5f24cf7c8dbe82667565cb
      with:
        path: sqlite-build
        key: sqlite-3.31
    - name: Build sqlite 3.31
      if: steps.restore-sqlite-binary.outputs.cache-hit != 'true'
      run: |
          # refer to https://stackoverflow.com/q/55674176/746461
          wget -qO- https://www.sqlite.org/2020/sqlite-autoconf-3310100.tar.gz | tar xvz
          mkdir sqlite-build
          cd sqlite-build
          ../sqlite-autoconf-3310100/configure
          make

    - name: Install sqlite 3.3.1
      run: |
          cd sqlite-build
          # The following commands are extracted from `make install`
          sudo ./libtool --mode=install /usr/bin/install -c sqlite3 '/usr/local/bin'
          sudo ./libtool --mode=install /usr/bin/install -c libsqlite3.la '/usr/local/lib'
          export LD_LIBRARY_PATH="/usr/local/lib"
          python3 <<heredoc
          import sqlite3
          print(sqlite3.sqlite_version)
          heredoc
    - name: Test with pytest
      # By default, bash runs with `-e` option.
      # Bash supports all of the single-character shell options documented in the description of the set builtin command,
      # thus -e means fail fast.
      # In this step, pytest may fail. In this case, we continue to run the next command, and check if we need to upload artifacts.
      shell: bash {0}
      run: |
        export LD_LIBRARY_PATH="/usr/local/lib"
        if pytest --rootdir=src/GooglePlayAdvancedSearch/tests --tb=short; then
          exit
        elif [[ -d screenshots ]]; then
          echo "::set-env name=upload::true"
        fi
        exit 1
    - name: Upload artifacts
      if: ${{ env.upload=='true' }}
      uses: actions/upload-artifact@v2
      with:
        name: screenshots
        path: screenshots/


